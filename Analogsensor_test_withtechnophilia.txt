#include<avr/io.h>
#include<util/delay.h>

#define MAX_SPEED 1023
#define MIN_SPEED 0

#define ROBOT_SPEED 200

#define SENSOR_THRESH 800

#define SCALE (MAX_SPEED/ROBOT_SPEED)

#define M_CW 1
#define M_CCW 2
#define M_STOP 0

int ADCsingleREAD(uint8_t adctouse)
{
    int ADCval;

    ADMUX = adctouse;         // use #1 ADC
    ADMUX |= (1 << REFS0)|(1<<REFS1);    // use AVcc as the reference
    ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
    
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);    // 128 prescale for 8Mhz
    ADCSRA |= (1 << ADEN);    // Enable the ADC

    ADCSRA |= (1 << ADSC);    // Start the ADC conversion

    while(ADCSRA & (1 << ADSC));      // Thanks T, this line waits for the ADC to finish 


    ADCval = ADCL;
    ADCval = (ADCH << 8) + ADCval;    // ADCH is read so ADC can be updated again

    return ADCval;
}
int readSensors()
{


}

void main()
{
	int sensor1,sensor2,sensor3,sensor4,sensor5;
	DDRB=0b00001111;
	while(1)
	{
		sensor1=ADCsingleREAD(5);
		sensor2=ADCsingleREAD(4);
		sensor3=ADCsingleREAD(3);
		sensor4=ADCsingleREAD(2);
		ADCSRA=0X00;
		ADMUX=0x00;
		sensor5=ADCsingleREAD(1);
		if(sensor1>SENSOR_THRESH)
		PORTB|=(1<<PB0);
		else
		PORTB&=~(1<<PB0);
		if(sensor2>SENSOR_THRESH)
		PORTB|=(1<<PB1);
		else
		PORTB&=~(1<<PB1);
		if(sensor5>SENSOR_THRESH)
		PORTB|=(1<<PB3);
		else
		PORTB&=~(1<<PB3);
		
		
		
	}
}
